QUESTION 1. What is the Big O for this?

1.) Constant time O(1), one operation done.  

2.) Linear time O(n), have to perform same operation n times.


QUESTION 2. Even or odd

Constant Time O(1), single operation

QUESTION 3. Are you here?

Polynomial time O(n^k), uses one nested loop.

QUESTION 4. Doubler

What is the Big O of the following algorithm? Explain your answer

Linear time O(n), same operation done n times

function doubleArrayValues(array) {
    for (let i = 0; i < array.length; i++) {
        array[i] *= 2;
    }
    return array;
}

5. Naive search
What is the Big O of the following algorithm? Explain your answer

---Linear time O(n), same operation done n times

function naiveSearch(array, item) {
    for (let i = 0; i < array.length; i++) {
        if (array[i] === item) {
            return i;
        }
    }
}
6. Creating pairs:
What is the Big O of the following algorithm? Explain your answer

---Polynomial time O(n^k), uses one nested loop.

function createPairs(arr) {
    for (let i = 0; i < arr.length; i++) {
        for(let j = i + 1; j < arr.length; j++) {
            console.log(arr[i] + ", " +  arr[j] );
        }
    }
}
7. Compute the sequence
What does the following algorithm do? What is its runtime complexity? Explain your answer
---creates a a Fibonacci sequence to length num.  Linear time 0(n), task length increases as num increases.

function compute(num) {
    let result = [];
    for (let i = 1; i <= num; i++) {

        if (i === 1) {
            result.push(0);
        }
        else if (i == 2) {
            result.push(1);
        }
        else {
            result.push(result[i - 2] + result[i - 3]);
        }
    }
    return result;
}
8. An efficient search
In this example, we return to the problem of searching using a more sophisticated approach than in naive search, above. Assume that the input array is always sorted. What is the Big O of the following algorithm? Explain your answer

---Logarithmic time O(log(n)), cuts problem size in half as index increases.

function efficientSearch(array, item) {
    let minIndex = 0;
    let maxIndex = array.length - 1;
    let currentIndex;
    let currentElement;

    while (minIndex <= maxIndex) {
        currentIndex = Math.floor((minIndex + maxIndex) / 2);
        currentElement = array[currentIndex];

        if (currentElement < item) {
            minIndex = currentIndex + 1;
        }
        else if (currentElement > item) {
            maxIndex = currentIndex - 1;
        }
        else {
            return currentIndex;
        }
    }
    return -1;
}
9. Random element
What is the Big O of the following algorithm? Explain your answer

---Constant time O(1), performs one operation regardless of length.

function findRandomElement(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
}
10. What Am I?
What does the following algorithm do? What is the Big O of the following algorithm? Explain your answer


---checks if a number n is not divisible by a value i.  Would assume this is linear, has to check each value of i.

function isWhat(n) {
    if (n < 2 || n % 1 != 0) {
        return false;
    }
    for (let i = 2; i < n; ++i) {
        if (n % i == 0) return false;
    }
    return true;
}

11. Tower of Hanoi
The Tower of Hanoi is a very famous mathematical puzzle (some call it game!). This is how it goes:

There are three rods and a number of disks of different sizes which can slide onto any rod. The puzzle starts with the disks neatly stacked in ascending order of size on one rod, the smallest disk at the top (making a conical shape). The other two rods are empty to begin with.
The goal of the puzzle is to move the entire stack of rods to another rod (can't be the original rod where it was stacked before) where it will be stacked in the ascending order as well. This should be done obeying the following rules: i) Only one disk may be moved at a time ii) Each move consists of taking the upper disk from one of the rods and sliding it onto another rod, on top of the other disks that may already be present on that rod. iii) A larger disk may not placed on top of a smaller disk
Input:

Rod A	Rod B	Rod C
----		
---------		
-------------		
Output:

Rod A	Rod B	Rod C
----
---------
-------------
Derive an algorithm to solve the Tower of Hanoi puzzle.
Implement your algorithm using recursion. Your program should display each movement of the disk from one rod to another.
If you are given 5 disks, how do the rods look like after 7 recursive calls?
How many moves are needed to complete the puzzle with 3 disks? with 4 disks? with 5 disks?
What is the runtime of your algorithm?

--